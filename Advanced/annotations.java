

//FunctionalInterface:in java is  an interface that only a single abstract method.it can contain default and static method which do have an implementation.
//@FunctionInterface annotation helps us to make sure that a functional interface is not having more than one abstract method.
@FunctionalInterface
interface  myFunctionalInterface{
    void thisMethod();
//    void thisMethod2();

}

//Annotations provides metadata to class/methods.
//Annotations start with '@'.
//Annotations are helpful for detecting erros. Example : @override annotations will make sure that there are no typos while overriding a method.


//1:@Override:
//This annotation makes sure that the sub class method is successfully overiding the parent class method.
//While overriding a class, there is a chance of typing errors or spelling mistakes. In such cases, the method will not get overridden and you will get an error.
//Override exception helps us to encounter such situtations by extracting a warning from the compiler.
class Phone{
    public void showTime(){
        System.out.println("TIme is 8am");
    }
}
class NewPhone extends Phone{
    @Override
    public void showTime(){
        System.out.println("Time is 8pm");
    }
    //@Deprecated :
    //This annotation is used to mark a deprecated method.
    //If developer uses the deprecated method then the compiler generated a warning.
    //There high chance of removal of deprecated methods in future versions therefore it is better to not use them.
    @Deprecated
    public int sum(int a, int b){
        return  a+b;
    }
}
public class annotations {
//    3:@SupressWarnings :(complier ki awaaz ko dabana(Warning removal))
        //This annotation helps us to supress some warnings that are being generated by compiler.
    @SuppressWarnings("deprecation")
    public static void main(String[] args) {
      NewPhone n=new NewPhone();
      n.showTime();
      n.sum(1,2);
    }
}
